
* My Emacs Config

** Paradox package manager
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t)
  ;  :config
  ;(load "~/.emacs.d/.paradox-token.el"))

 #+END_SRC
** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init
    (require 'helm-config)
    (setq helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-M-x-fuzzy-match t)
    (helm-mode)
    :bind
    (("C-h a" . helm-apropos)
     ("C-x C-b" . helm-buffers-list)
     ("M-y" . helm-show-kill-ring)
;;     ("M-x" . helm-M-x)
     ("C-x c o" . helm-occur)
     ("C-x c y" . helm-yas-complete)
     ("C-x c SPC" . helm-all-mark-rings))
    :config
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent acgtion
    (define-key helm-map (kbd "C-z") 'helm-execute-persistent-action) ; make TAB work in terminal
    (define-key helm-map (kbd "C-i")  'helm-select-action) ; list action
    (setq helm-split-window-in-side-p t ; open helm buffer inside current window
          helm-move-to-line-cycle-in-source t ; cycle back when reaching top or bottom of source
          helm-ff-search-library-in-sexp t
          helm-ff-file-name-history-use-recentf t))

  (use-package helm-descbinds
    :ensure t
    :init
    (helm-descbinds-mode))
  ; also explore helm-swoop

#+END_SRC
** Emacs Theming

#+BEGIN_SRC emacs-lisp
  (use-package mode-icons
    :ensure t
    :demand t
    :init
    (mode-icons-mode))
  (use-package base16-theme :ensure t)
  (use-package nyan-mode
    :ensure t
    :demand t
    :init
    (nyan-mode)
    (add-hook 'eshell-load-hook 'nyan-prompt-enable))

  (use-package mode-icons :ensure t :demand t)
  (load "~/.emacs.d/customize-init.el")

  (use-package pretty-lambdada
    :ensure t
    :init
    (global-pretty-lambda-mode))

#+END_SRC
** General enviornment configs
   
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/customize-init.el")

  (setq backup-directory-alist '((".*" . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;;read further in www.wisdomandwonder.com/worpress/wp-content/uploads/2014/03/C3F.html -via sachachua.com
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))


  ;;interface
  (menu-bar-showhide-tool-bar-menu-customize-disable)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; no tabs
  (setq-default indent-tabs-mode nil)
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1))

  (use-package smartparens
    :ensure t 
    :demand t
    :diminish smartparens-mode
    :config
    (require 'smartparens-config)
    (smartparens-global-mode t)
    ;;heredoc pair
    (sp-pair "\"\"\"" "\"\""))

  (use-package undo-tree
    :ensure t
    :demand t
    :diminish undo-tree-mode
    :config 
    (global-undo-tree-mode)) ;;explore more settings 

  (use-package dired+ :ensure t)

#+END_SRC
** Japanese language support
   
#+BEGIN_SRC emacs-lisp
  ;;japanese input
  (use-package mozc
    :config
    (setq default-input-methond "japanese-mozc"
          mozc-candidate-style 'overlay))
  ;;google translate-region
  (use-package google-translate
    :demand t
    :ensure t
    :init
    (require 'google-translate-smooth-ui)
    (setq google-translate-translation-directions-alist '(("ja" . "en"))
          google-translate-show-phonetic t)  

    :bind
    ("C-c t" . google-translate-smooth-translate))
  ;;sdic
  (use-package sdic
    :load-path "sdic-2.1.3/")

#+END_SRC
** aboabo goodness

#+BEGIN_SRC emacs-lisp
  (use-package avy :ensure t)

  (use-package hydra :ensure t :demand t)
  (defhydra hydra-zoom (global-map "C-=")
    "zoom"
    ("g" text-scale-increase "grow")
    ("s" text-scale-decrease "shrink")
    ("o" nil "exit"))


  (defun hydra-universal-argument (arg)
    (interactive "P")
    (setq prefix-arg (if (consp arg)
                         (list (* 4 (car arg)))
                       (if (eq arg '-)
                           (list -4)
                         '(4)))))

  (defhydra hydra-window (global-map "M-p" :columns 4)
    "window"
    ("h" windmove-left "left")
    ("j" windmove-down "down")
    ("k" windmove-up "up")
    ("l" windmove-right "right")
    ("a" ace-window "ace")
    ("u" hydra-universal-argument "universal")
    ("s" (lambda () (interactive) (ace-window 4)) "swap")
    ("d" (lambda () (interactive) (ace-window 16)) "delete")
    ("o" nil "Exit"))

  (key-chord-define-global "yy" 'hydra-window/body)


  (use-package swiper
    :ensure t
    :config
    )
  (use-package counsel
    :ensure t
    :config
    (use-package smex :ensure t)
    :bind
    ("M-x" . counsel-M-x))

  (use-package ace-window
    :ensure t
    :config
    (winner-mode t)
    (set-face-attribute 'aw-leading-char-face nil
                        :foreground "deep sky blue"
                        :weight 'bold
                        :height 3.0)
    (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
          aw-dispatch-always t))

  (defhydra hydra-aw ()
    "ace-window"
    ())
  ;;(?b balance-windows)
  ;;(?u winner-undo)
  ;;(?r winner-redo)))


#+END_SRC
** The Org

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (setq org-html-checkbox-type 'unicode)
  (setq org-html-checkbox-types
        '((unicode (on . "<span class=\"task-done\">&#x2611;</span>")
                   (off . "<span class=\"task-todo\">&#x2610;</span>")
                   (trans . "<span class=\"task-in-progress\">[-]</span>"))))

  (add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)
  (defun bh/display-inline-images ()
    (condition-case nil
        (org-display-inline-images)
      (error nil)))

  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-plantuml-jar-path "~/.emacs.d/plantuml.jar")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml .t)
     (dot . t)))
    (use-package ox-pandoc 
      :ensure t
      :init
      (add-to-list 'exec-path "~/.cabal/bin/"))

  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root (concat "file:///" (expand-file-name "~/reveal.js" ))))

  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC
** Auto complete with Company mode

#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers :ensure t)

  (use-package company-auctex
    :ensure t
    :init(company-auctex-init))

  (use-package company-jedi :ensure t)
  (use-package company-web :ensure t)
  (use-package company-ghc :ensure t)
  (use-package company-ghci :ensure t)
;;  (use-package company-racer :ensure t)

  (use-package company
    :ensure t
    :demand t
    :diminish company-mode
    :config
    (global-company-mode )
    (setq company-idle-delay 0.2)
    (setq company-minimum-prefix-length 1)
    ;;(add-hook 'after-init-hook 'global-company-mode)
    (add-to-list 'company-backends '(company-c-headers))
    (add-to-list 'company-backends '(company-auctex))
               (add-to-list 'company-backends '(company-jedi))
               (add-to-list 'company-backends '(company-web-html))
               (add-to-list 'company-backends '(company-web-jade))
               (add-to-list 'company-backends '(company-web-slim))
               (add-to-list 'company-backends '(company-ghc))
               (add-to-list 'company-backends '(company-ghci)))


#+END_SRC
** Syntax checking

#+BEGIN_SRC emacs-lisp
  (use-package flymake-easy :ensure t)
  (use-package flymake-sass
    :ensure f
    :config
    (add-hook 'sass-mode-hook 'flymake-sass-load))
  (use-package flymake-elixir
    :ensure t
    :config
    (add-hook 'elixir-mode-hook 'flymake-elixir-load))
  (use-package flymake-rust :ensure t)

#+END_SRC
** Developer tools
*** shell tools
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode :ensure t)
  ;;

#+END_SRC
*** git

#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)

#+END_SRC
*** projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure t)
  (use-package helm-projectile
    :ensure t
    :bind
    ("C-c p f" . helm-projectile-find-file))

#+END_SRC
*** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
    (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
    ;; interactive mode setup
    (require 'haskell-interactive-mode)
    (require 'haskell-process)
    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
    (custom-set-variables
     '(haskell-process-suggest-remove-import-lines t)
     '(haskell-process-auto-import-loaded-modules t)
     '(haskell-process-log t)
     '(haskell-process-type 'cabal-repl)))
  (add-to-list 'exec-path "/home/gitten/.cabal/bin")

#+END_SRC
*** Elixir and Erlang

#+BEGIN_SRC emacs-lisp
  (use-package erlang
    :ensure t
    :config
    (require 'erlang-start))

  ;;elixir
  (use-package elixir-mode :ensure t)
  (use-package alchemist :ensure t)

#+END_SRC
*** Python

#+BEGIN_SRC emacs-lisp
  ;;(use-package ein :ensure t) look into ob-ipython
  (use-package jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot))
  (use-package pydoc-info :ensure t) ; :load-path "/path/to/pydoc-info")
  (use-package matlab-mode :ensure t)
  (use-package ein :ensure t)

#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** GNU R

#+BEGIN_SRC emacs-lisp
  (use-package ess :ensure t)
  (use-package ess-R-data-view :ensure t)
  (use-package ess-R-object-popup
    :ensure t
    :config
    (define-key ess-mode-map "\C-c\C-g" 'ess-R-object-popup))
#+END_SRC
*** web dev

#+BEGIN_SRC emacs-lisp
  (use-package sass-mode :ensure t)

  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist '(("django" . "\\.html\\'")))
    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-markup-indent 2)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-enable-css-colorization t)
      (setq web-mode-enable-block-face t)
      (setq web-mode-enable-part-face t)
      (setq web-mode-enable-heredoc-fontification t)
      (setq web-mode-enable-current-element-highlight t)
      (setq web-mode-enable-current-column-highlight t))
      ;;(setq web-mode-enable-auto-pairing t)
                   
    (add-hook 'web-mode-hook 'my-web-mode-hook))


#+END_SRC
** Document tools

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode :ensure t)

#+END_SRC
