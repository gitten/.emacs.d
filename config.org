#+title: My Emacs Config - ARCHIVED

* General enviornment configs

  + Backups, autosave, and history behavior
    #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist '((".*" . "~/.emacs.d/backups")))
      (setq delete-old-versions -1)
      (setq version-control t)
      (setq vc-make-backup-files t)
      (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

      ;;read further in www.wisdomandwonder.com/worpress/wp-content/uploads/2014/03/C3F.html -via sachachua.com
      (setq savehist-file "~/.emacs.d/savehist")
      (savehist-mode 1)
      (setq history-length t)
      (setq history-delete-duplicates t)
      (setq savehist-save-minibuffer-history 1)
      (setq savehist-additional-variables
            '(kill-ring
              search-ring
              regexp-search-ring))
    #+END_SRC

  + Window toolbars
    #+BEGIN_SRC emacs-lisp
      (menu-bar-showhide-tool-bar-menu-customize-disable)
      (scroll-bar-mode -1)
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

  + No tabs
    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)

      (put 'narrow-to-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC

  + Easily open config file with function
    #+BEGIN_SRC emacs-lisp
      (defun dot-config ()
        "Opens Emacs configuration dot file."

        (interactive)
        (find-file "~/.emacs.d/config.org"))
    #+END_SRC

* Emacs Theming
  #+BEGIN_SRC emacs-lisp
    (use-package mode-icons
      :ensure t
      :config
      (mode-icons-mode))

    (use-package base16-theme :ensure t)

    (use-package nyan-mode
      :if window-system
      :ensure t
      :config
      (nyan-mode))

    (setq custom-safe-themes t)
  #+END_SRC

* Convienince
** Key Chords
   #+BEGIN_SRC emacs-lisp
     (use-package key-chord
       :ensure t
       :config
       (key-chord-mode 1))
   #+END_SRC

** Hilight point location with Beacon
   #+BEGIN_SRC emacs-lisp
     (use-package beacon 
       :ensure t
       :config
       (beacon-mode 1)
       (setq beacon-size 60)
       (setq beacon-blink-delay 0.5)
       (setq beacon-blink-duration 0.5)
       (setq beacon-color "#666600"))
   #+END_SRC

** aboabo goodnesss
*** Ivy - minibuffer completion
    #+BEGIN_SRC emacs-lisp
      (use-package ivy 
        :ensure t
        :diminish
        :config
        (ivy-mode 1))
    #+END_SRC

*** Swiper - isearch overview
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC

*** Counsel - misc completion functions w/Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
#+END_SRC
** General Autocompletion
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :diminish company-mode
       :config
       (setq company-minimum-prefix-length 2)
       (setq company-show-numbers t))

   #+END_SRC

** Hydra - mini modal key bindings
   #+BEGIN_SRC emacs-lisp
     (use-package hydra :ensure t)
   #+END_SRC

*** General Hydras for Emacs
    + Key bindings for text scaling
      #+BEGIN_SRC emacs-lisp
        (defhydra hydra-zoom (global-map "C-=")
          "zoom"
          ("g" text-scale-increase "grow")
          ("s" text-scale-decrease "shrink")
          ("o" nil "exit"))
      #+END_SRC

** Delimeter tools
*** Smartparens - pair management
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :ensure t
        :config (require 'smartparens-config))
    #+END_SRC
*** Rainbow-delimiters - pair highlighting
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :ensure t
        :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+END_SRC
* The Org
** General Configs
   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
     (setq org-time-clocksum-use-fractional t)
     (add-hook 'org-mode-hook #'company-mode)
   #+END_SRC

** Babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
       '((plantuml . t)
         (dot .t )))
   #+END_SRC

** 3rd party packages
*** Pretty bullets
    #+BEGIN_SRC 
      (use-package org-bullets
        :if 
        :ensure t
        :config (add-hook 'org-mode-hook #'org-bullets-mode))
    #+END_SRC

* Dev Tools
** Version Control
   #+BEGIN_SRC emacs-lisp
     (use-package magit :ensure t)
   #+END_SRC

** Syntax Checker
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck :ensure t)
   #+END_SRC

** Python
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :init (elpy-enable)
       (setq elpy-rpc-python-command "python3"))
   #+END_SRC

*** Auto Formating
    - requires pip black
#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :disabled
    :hook python-mode)

  (use-package python-black
    :ensure t
    :after python)
#+END_SRC
   
** Rust
*** Major Mode
    #+BEGIN_SRC emacs-lisp
      (use-package rust-mode 
        :ensure t
        :config
        (smartparens-mode 1)
        (setq rust-format-on-save t)
        (add-to-list 'exec-path "~/.cargo/bin")
        (setenv "PATH" (concat "~/.cargo/bin" ":" (getenv "PATH"))))
    #+END_SRC

*** Package Manager
    #+BEGIN_SRC emacs-lisp
      (use-package cargo :ensure t)
    #+END_SRC

*** Code Completion/Navigation
    #+BEGIN_SRC emacs-lisp
      (use-package racer
        :ensure t
        :config
        (setq racer-cmd "~/.cargo/bin/racer")
        (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src")
        (add-hook 'rust-mode-hook #'racer-mode)
        (add-hook 'racer-mode-hook #'eldoc-mode)
        (add-hook 'racer-mode-hook #'company-mode))
    #+END_SRC

*** Syntax Checker
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-rust
        :ensure t
        :config
        (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
    #+END_SRC

*** Playground - REPL substitute
    #+BEGIN_SRC emacs-lisp
      (use-package rust-playground :ensure t)
    #+END_SRC
** Racket
   #+BEGIN_SRC emacs-lisp
     (use-package racket-mode 
       :ensure t
       :config (company-mode 1))
   #+END_SRC

** The Beam Languages
*** Erlang
*** Elixir
*** LFE
    
** Haskell

** Elm
