#+title: My Emacs Config

* General enviornment configs
  + Move customize config out of init.el
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "customize-config.el"))
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
  (load custom-file)
#+END_SRC

  + Backups, autosave, and history behavior
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;;read further in www.wisdomandwonder.com/worpress/wp-content/uploads/2014/03/C3F.html -via sachachua.com
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+END_SRC

  + Window toolbars
#+BEGIN_SRC emacs-lisp
  (menu-bar-showhide-tool-bar-menu-customize-disable)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

  + No tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)

  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

  + Easily open config file with function
#+BEGIN_SRC emacs-lisp
  (defun dot-config ()
    "Opens Emacs configuration dot file."

    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC    

* Emacs Theming
#+BEGIN_SRC emacs-lisp
  (use-package mode-icons
    :ensure t
    :config
    (mode-icons-mode))

  (use-package base16-theme :ensure t)

  (use-package nyan-mode
    :ensure t
    :config
    (nyan-mode))

  (setq custom-safe-themes t)
#+END_SRC

* Coqnvienince
** Key Chords
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1))
#+END_SRC

** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config 
    (global-undo-tree-mode)) ;;explore more settings 
#+END_SRC

** Extend dired functionality
#+BEGIN_SRC emacs-lisp
  (use-package dired+ :ensure t)
#+END_SRC

** Hilight point location with Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon 
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-size 60)
    (setq beacon-blink-delay 0.5)
    (setq beacon-blink-duration 0.5)
    (setq beacon-color "#666600"))
#+END_SRC

** aboabo goodnesss
*** Ivy - minibuffer completion
#+BEGIN_SRC emacs-lisp
  (use-package ivy 
     :ensure t
     :config
     (ivy-mode 1)
     (define-key ivy-minibuffer-map (kbd "C-l") 'backward-kill-word))
#+END_SRC

*** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t)
#+END_SRC

*** Swiper - isearch alternative
#+BEGIN_SRC emacs-lisp
  (use-package swiper 
   :ensure t
   :bind
   ("C-s" . swiper-all))
#+END_SRC

** General Autocompletion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :init
  (global-company-mode)
  :config
  (setq company-minimum-prefix-length 2)
  (setq company-show-numbers t)

  (defun dired-no-comany () (compnay-mode 0))
  (add-hook 'dired-mode-hook 'dired-no-company))
#+END_SRC

* The Org
** General Configs
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
(setq org-time-clocksum-use-fractional t)
#+END_SRC

** 3rd party packages
*** Pretty bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((plantuml . t)
    (dot .t )))
#+END_SRC

* Dev Tools
** Version Control
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t)
#+END_SRC

** Syntax Checker 
 #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode))
 #+END_SRC

** Python

** Rust
*** Major Mode
#+BEGIN_SRC emacs-lisp
(use-package rust-mode 
  :ensure t
  :config
  (setq rust-format-on-save t))
#+END_SRC

*** Package Manager
#+BEGIN_SRC emacs-lisp
(use-package cargo :ensure t)
#+END_SRC

*** Code Completion/Navigation
#+BEGIN_SRC emacs-lisp
(use-package racer
  :ensure t
  :config
  (setq racer-cmd "~/.cargo/bin/racer")
  (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src")
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))
#+END_SRC

*** Syntax Checker
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rust
  :ensure t
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

** Racket

** Elixir

** Haskell

** Elm
