#+title: My Emacs Config

* General enviornment configs
  + Move customize config out of init.el
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "customize-config.el"))
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
  (load custom-file)
#+END_SRC

  + Backups, autosave, and history behavior
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;;read further in www.wisdomandwonder.com/worpress/wp-content/uploads/2014/03/C3F.html -via sachachua.com
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+END_SRC

  + Window toolbars
#+BEGIN_SRC emacs-lisp
  (menu-bar-showhide-tool-bar-menu-customize-disable)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

  + No tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)

  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

  + Easily open config file with function
#+BEGIN_SRC emacs-lisp
  (defun dot-config ()
    "Opens Emacs configuration dot file."

    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC    

* Emacs Theming
#+BEGIN_SRC emacs-lisp
  (use-package mode-icons
    :ensure t
    :config
    (mode-icons-mode))

  (use-package base16-theme :ensure t)

  (use-package nyan-mode
    :ensure t
    :config
    (nyan-mode))

  (setq custom-safe-themes t)
#+END_SRC

* Convienince
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1))

  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config 
    (global-undo-tree-mode)) ;;explore more settings 

  (use-package dired+ :ensure t)

  (use-package beacon 
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-size 60)
    (setq beacon-blink-delay 0.5)
    (setq beacon-blink-duration 0.5)
    (setq beacon-color "#666600"))
#+END_SRC
